// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark endpoints
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package eark

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "eark" service endpoints.
type Endpoints struct {
	GenEarkAips  goa.Endpoint
	AipGenStatus goa.Endpoint
	CreateDips   goa.Endpoint
	DipGenStatus goa.Endpoint
}

// NewEndpoints wraps the methods of the "eark" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GenEarkAips:  NewGenEarkAipsEndpoint(s),
		AipGenStatus: NewAipGenStatusEndpoint(s),
		CreateDips:   NewCreateDipsEndpoint(s),
		DipGenStatus: NewDipGenStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "eark" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GenEarkAips = m(e.GenEarkAips)
	e.AipGenStatus = m(e.AipGenStatus)
	e.CreateDips = m(e.CreateDips)
	e.DipGenStatus = m(e.DipGenStatus)
}

// NewGenEarkAipsEndpoint returns an endpoint function that calls the method
// "gen_eark_aips" of service "eark".
func NewGenEarkAipsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GenEarkAips(ctx)
	}
}

// NewAipGenStatusEndpoint returns an endpoint function that calls the method
// "aip_gen_status" of service "eark".
func NewAipGenStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AipGenStatus(ctx)
	}
}

// NewCreateDipsEndpoint returns an endpoint function that calls the method
// "create_dips" of service "eark".
func NewCreateDipsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateDips(ctx)
	}
}

// NewDipGenStatusEndpoint returns an endpoint function that calls the method
// "dip_gen_status" of service "eark".
func NewDipGenStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DipGenStatus(ctx)
	}
}
