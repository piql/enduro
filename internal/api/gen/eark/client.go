// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark client
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package eark

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "eark" service client.
type Client struct {
	GenEarkAipsEndpoint  goa.Endpoint
	AipGenStatusEndpoint goa.Endpoint
	CreateDipsEndpoint   goa.Endpoint
	DipGenStatusEndpoint goa.Endpoint
}

// NewClient initializes a "eark" service client given the endpoints.
func NewClient(genEarkAips, aipGenStatus, createDips, dipGenStatus goa.Endpoint) *Client {
	return &Client{
		GenEarkAipsEndpoint:  genEarkAips,
		AipGenStatusEndpoint: aipGenStatus,
		CreateDipsEndpoint:   createDips,
		DipGenStatusEndpoint: dipGenStatus,
	}
}

// GenEarkAips calls the "gen_eark_aips" endpoint of the "eark" service.
// GenEarkAips may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) GenEarkAips(ctx context.Context) (res *EarkResult, err error) {
	var ires interface{}
	ires, err = c.GenEarkAipsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkResult), nil
}

// AipGenStatus calls the "aip_gen_status" endpoint of the "eark" service.
func (c *Client) AipGenStatus(ctx context.Context) (res *EarkStatusResult, err error) {
	var ires interface{}
	ires, err = c.AipGenStatusEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkStatusResult), nil
}

// CreateDips calls the "create_dips" endpoint of the "eark" service.
// CreateDips may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) CreateDips(ctx context.Context) (res *EarkDIPResult, err error) {
	var ires interface{}
	ires, err = c.CreateDipsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkDIPResult), nil
}

// DipGenStatus calls the "dip_gen_status" endpoint of the "eark" service.
func (c *Client) DipGenStatus(ctx context.Context) (res *EarkStatusResult, err error) {
	var ires interface{}
	ires, err = c.DipGenStatusEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkStatusResult), nil
}
