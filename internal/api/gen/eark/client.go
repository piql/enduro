// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark client
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package eark

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "eark" service client.
type Client struct {
	SubmitEndpoint goa.Endpoint
	StatusEndpoint goa.Endpoint
}

// NewClient initializes a "eark" service client given the endpoints.
func NewClient(submit, status goa.Endpoint) *Client {
	return &Client{
		SubmitEndpoint: submit,
		StatusEndpoint: status,
	}
}

// Submit calls the "submit" endpoint of the "eark" service.
// Submit may return the following errors:
//   - "not_available" (type *goa.ServiceError)
//   - "not_valid" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Submit(ctx context.Context) (res *EarkResult, err error) {
	var ires interface{}
	ires, err = c.SubmitEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkResult), nil
}

// Status calls the "status" endpoint of the "eark" service.
func (c *Client) Status(ctx context.Context) (res *EarkStatusResult, err error) {
	var ires interface{}
	ires, err = c.StatusEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*EarkStatusResult), nil
}
