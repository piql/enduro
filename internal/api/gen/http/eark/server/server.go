// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark HTTP server
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package server

import (
	"context"
	"net/http"

	eark "github.com/penwern/enduro/internal/api/gen/eark"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the eark service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	GenEarkAips  http.Handler
	AipGenStatus http.Handler
	GenEarkDips  http.Handler
	DipGenStatus http.Handler
	CORS         http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the eark service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *eark.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GenEarkAips", "POST", "/eark/gen-aip"},
			{"AipGenStatus", "GET", "/eark/aip-gen-status"},
			{"GenEarkDips", "POST", "/eark/gen_dip"},
			{"DipGenStatus", "GET", "/eark/dip-gen-status"},
			{"CORS", "OPTIONS", "/eark/gen-aip"},
			{"CORS", "OPTIONS", "/eark/aip-gen-status"},
			{"CORS", "OPTIONS", "/eark/gen_dip"},
			{"CORS", "OPTIONS", "/eark/dip-gen-status"},
		},
		GenEarkAips:  NewGenEarkAipsHandler(e.GenEarkAips, mux, decoder, encoder, errhandler, formatter),
		AipGenStatus: NewAipGenStatusHandler(e.AipGenStatus, mux, decoder, encoder, errhandler, formatter),
		GenEarkDips:  NewGenEarkDipsHandler(e.GenEarkDips, mux, decoder, encoder, errhandler, formatter),
		DipGenStatus: NewDipGenStatusHandler(e.DipGenStatus, mux, decoder, encoder, errhandler, formatter),
		CORS:         NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "eark" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GenEarkAips = m(s.GenEarkAips)
	s.AipGenStatus = m(s.AipGenStatus)
	s.GenEarkDips = m(s.GenEarkDips)
	s.DipGenStatus = m(s.DipGenStatus)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the eark endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGenEarkAipsHandler(mux, h.GenEarkAips)
	MountAipGenStatusHandler(mux, h.AipGenStatus)
	MountGenEarkDipsHandler(mux, h.GenEarkDips)
	MountDipGenStatusHandler(mux, h.DipGenStatus)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the eark endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGenEarkAipsHandler configures the mux to serve the "eark" service
// "gen_eark_aips" endpoint.
func MountGenEarkAipsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEarkOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/eark/gen-aip", f)
}

// NewGenEarkAipsHandler creates a HTTP handler which loads the HTTP request
// and calls the "eark" service "gen_eark_aips" endpoint.
func NewGenEarkAipsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGenEarkAipsResponse(encoder)
		encodeError    = EncodeGenEarkAipsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "gen_eark_aips")
		ctx = context.WithValue(ctx, goa.ServiceKey, "eark")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAipGenStatusHandler configures the mux to serve the "eark" service
// "aip_gen_status" endpoint.
func MountAipGenStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEarkOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/eark/aip-gen-status", f)
}

// NewAipGenStatusHandler creates a HTTP handler which loads the HTTP request
// and calls the "eark" service "aip_gen_status" endpoint.
func NewAipGenStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeAipGenStatusResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "aip_gen_status")
		ctx = context.WithValue(ctx, goa.ServiceKey, "eark")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenEarkDipsHandler configures the mux to serve the "eark" service
// "gen_eark_dips" endpoint.
func MountGenEarkDipsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEarkOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/eark/gen_dip", f)
}

// NewGenEarkDipsHandler creates a HTTP handler which loads the HTTP request
// and calls the "eark" service "gen_eark_dips" endpoint.
func NewGenEarkDipsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGenEarkDipsResponse(encoder)
		encodeError    = EncodeGenEarkDipsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "gen_eark_dips")
		ctx = context.WithValue(ctx, goa.ServiceKey, "eark")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDipGenStatusHandler configures the mux to serve the "eark" service
// "dip_gen_status" endpoint.
func MountDipGenStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEarkOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/eark/dip-gen-status", f)
}

// NewDipGenStatusHandler creates a HTTP handler which loads the HTTP request
// and calls the "eark" service "dip_gen_status" endpoint.
func NewDipGenStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeDipGenStatusResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "dip_gen_status")
		ctx = context.WithValue(ctx, goa.ServiceKey, "eark")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service eark.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleEarkOrigin(h)
	mux.Handle("OPTIONS", "/eark/gen-aip", h.ServeHTTP)
	mux.Handle("OPTIONS", "/eark/aip-gen-status", h.ServeHTTP)
	mux.Handle("OPTIONS", "/eark/gen_dip", h.ServeHTTP)
	mux.Handle("OPTIONS", "/eark/dip-gen-status", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleEarkOrigin applies the CORS response headers corresponding to the
// origin for the service eark.
func HandleEarkOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
