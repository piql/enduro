// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark client HTTP transport
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the eark service endpoint HTTP clients.
type Client struct {
	// GenEarkAips Doer is the HTTP client used to make requests to the
	// gen_eark_aips endpoint.
	GenEarkAipsDoer goahttp.Doer

	// AipGenStatus Doer is the HTTP client used to make requests to the
	// aip_gen_status endpoint.
	AipGenStatusDoer goahttp.Doer

	// GenEarkDips Doer is the HTTP client used to make requests to the
	// gen_eark_dips endpoint.
	GenEarkDipsDoer goahttp.Doer

	// DipGenStatus Doer is the HTTP client used to make requests to the
	// dip_gen_status endpoint.
	DipGenStatusDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the eark service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GenEarkAipsDoer:     doer,
		AipGenStatusDoer:    doer,
		GenEarkDipsDoer:     doer,
		DipGenStatusDoer:    doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GenEarkAips returns an endpoint that makes HTTP requests to the eark service
// gen_eark_aips server.
func (c *Client) GenEarkAips() goa.Endpoint {
	var (
		decodeResponse = DecodeGenEarkAipsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGenEarkAipsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenEarkAipsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("eark", "gen_eark_aips", err)
		}
		return decodeResponse(resp)
	}
}

// AipGenStatus returns an endpoint that makes HTTP requests to the eark
// service aip_gen_status server.
func (c *Client) AipGenStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeAipGenStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAipGenStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AipGenStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("eark", "aip_gen_status", err)
		}
		return decodeResponse(resp)
	}
}

// GenEarkDips returns an endpoint that makes HTTP requests to the eark service
// gen_eark_dips server.
func (c *Client) GenEarkDips() goa.Endpoint {
	var (
		decodeResponse = DecodeGenEarkDipsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGenEarkDipsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenEarkDipsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("eark", "gen_eark_dips", err)
		}
		return decodeResponse(resp)
	}
}

// DipGenStatus returns an endpoint that makes HTTP requests to the eark
// service dip_gen_status server.
func (c *Client) DipGenStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeDipGenStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDipGenStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DipGenStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("eark", "dip_gen_status", err)
		}
		return decodeResponse(resp)
	}
}
