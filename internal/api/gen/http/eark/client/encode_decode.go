// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGenEarkAipsRequest instantiates a HTTP request object with method and
// path set to call the "eark" service "gen_eark_aips" endpoint
func (c *Client) BuildGenEarkAipsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenEarkAipsEarkPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "gen_eark_aips", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGenEarkAipsResponse returns a decoder for responses returned by the
// eark gen_eark_aips endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGenEarkAipsResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGenEarkAipsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body GenEarkAipsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_aips", err)
			}
			err = ValidateGenEarkAipsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_aips", err)
			}
			res := NewGenEarkAipsEarkAIPResultAccepted(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body GenEarkAipsNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_aips", err)
			}
			err = ValidateGenEarkAipsNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_aips", err)
			}
			return nil, NewGenEarkAipsNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body GenEarkAipsNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_aips", err)
			}
			err = ValidateGenEarkAipsNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_aips", err)
			}
			return nil, NewGenEarkAipsNotValid(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "gen_eark_aips", resp.StatusCode, string(body))
		}
	}
}

// BuildAipGenStatusRequest instantiates a HTTP request object with method and
// path set to call the "eark" service "aip_gen_status" endpoint
func (c *Client) BuildAipGenStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AipGenStatusEarkPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "aip_gen_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAipGenStatusResponse returns a decoder for responses returned by the
// eark aip_gen_status endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAipGenStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AipGenStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "aip_gen_status", err)
			}
			err = ValidateAipGenStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "aip_gen_status", err)
			}
			res := NewAipGenStatusEarkAIPStatusResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "aip_gen_status", resp.StatusCode, string(body))
		}
	}
}

// BuildGenEarkDipsRequest instantiates a HTTP request object with method and
// path set to call the "eark" service "gen_eark_dips" endpoint
func (c *Client) BuildGenEarkDipsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenEarkDipsEarkPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "gen_eark_dips", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGenEarkDipsResponse returns a decoder for responses returned by the
// eark gen_eark_dips endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGenEarkDipsResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGenEarkDipsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body GenEarkDipsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_dips", err)
			}
			err = ValidateGenEarkDipsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_dips", err)
			}
			res := NewGenEarkDipsEarkDIPResultAccepted(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body GenEarkDipsNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_dips", err)
			}
			err = ValidateGenEarkDipsNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_dips", err)
			}
			return nil, NewGenEarkDipsNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body GenEarkDipsNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "gen_eark_dips", err)
			}
			err = ValidateGenEarkDipsNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "gen_eark_dips", err)
			}
			return nil, NewGenEarkDipsNotValid(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "gen_eark_dips", resp.StatusCode, string(body))
		}
	}
}

// BuildDipGenStatusRequest instantiates a HTTP request object with method and
// path set to call the "eark" service "dip_gen_status" endpoint
func (c *Client) BuildDipGenStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DipGenStatusEarkPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "dip_gen_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDipGenStatusResponse returns a decoder for responses returned by the
// eark dip_gen_status endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDipGenStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DipGenStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "dip_gen_status", err)
			}
			err = ValidateDipGenStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "dip_gen_status", err)
			}
			res := NewDipGenStatusEarkDIPStatusResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "dip_gen_status", resp.StatusCode, string(body))
		}
	}
}
