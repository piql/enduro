// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildSubmitRequest instantiates a HTTP request object with method and path
// set to call the "eark" service "submit" endpoint
func (c *Client) BuildSubmitRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubmitEarkPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "submit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSubmitResponse returns a decoder for responses returned by the eark
// submit endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSubmitResponse may return the following errors:
//   - "not_available" (type *goa.ServiceError): http.StatusConflict
//   - "not_valid" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeSubmitResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body SubmitResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "submit", err)
			}
			err = ValidateSubmitResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "submit", err)
			}
			res := NewSubmitEarkResultAccepted(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body SubmitNotAvailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "submit", err)
			}
			err = ValidateSubmitNotAvailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "submit", err)
			}
			return nil, NewSubmitNotAvailable(&body)
		case http.StatusBadRequest:
			var (
				body SubmitNotValidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "submit", err)
			}
			err = ValidateSubmitNotValidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "submit", err)
			}
			return nil, NewSubmitNotValid(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "submit", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "eark" service "status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusEarkPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStatusResponse returns a decoder for responses returned by the eark
// status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "status", err)
			}
			err = ValidateStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("eark", "status", err)
			}
			res := NewStatusEarkStatusResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "status", resp.StatusCode, string(body))
		}
	}
}

// BuildHintsRequest instantiates a HTTP request object with method and path
// set to call the "eark" service "hints" endpoint
func (c *Client) BuildHintsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HintsEarkPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("eark", "hints", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeHintsResponse returns a decoder for responses returned by the eark
// hints endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeHintsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body HintsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("eark", "hints", err)
			}
			res := NewHintsEarkHintsResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("eark", "hints", resp.StatusCode, string(body))
		}
	}
}
