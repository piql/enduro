// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark HTTP client types
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package client

import (
	eark "github.com/penwern/enduro/internal/api/gen/eark"
	goa "goa.design/goa/v3/pkg"
)

// GenEarkAipsResponseBody is the type of the "eark" service "gen_eark_aips"
// endpoint HTTP response body.
type GenEarkAipsResponseBody struct {
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	RunID      *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
}

// AipGenStatusResponseBody is the type of the "eark" service "aip_gen_status"
// endpoint HTTP response body.
type AipGenStatusResponseBody struct {
	Running    *bool   `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
	Status     *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	RunID      *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
}

// GenEarkDipsResponseBody is the type of the "eark" service "gen_eark_dips"
// endpoint HTTP response body.
type GenEarkDipsResponseBody struct {
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	AipName *string `form:"aip_name,omitempty" json:"aip_name,omitempty" xml:"aip_name,omitempty"`
	DipName *string `form:"dip_name,omitempty" json:"dip_name,omitempty" xml:"dip_name,omitempty"`
}

// DipGenStatusResponseBody is the type of the "eark" service "dip_gen_status"
// endpoint HTTP response body.
type DipGenStatusResponseBody struct {
	Running    *bool   `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
	Status     *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	RunID      *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
}

// GenEarkAipsNotAvailableResponseBody is the type of the "eark" service
// "gen_eark_aips" endpoint HTTP response body for the "not_available" error.
type GenEarkAipsNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenEarkAipsNotValidResponseBody is the type of the "eark" service
// "gen_eark_aips" endpoint HTTP response body for the "not_valid" error.
type GenEarkAipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenEarkDipsNotAvailableResponseBody is the type of the "eark" service
// "gen_eark_dips" endpoint HTTP response body for the "not_available" error.
type GenEarkDipsNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenEarkDipsNotValidResponseBody is the type of the "eark" service
// "gen_eark_dips" endpoint HTTP response body for the "not_valid" error.
type GenEarkDipsNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewGenEarkAipsEarkResultAccepted builds a "eark" service "gen_eark_aips"
// endpoint result from a HTTP "Accepted" response.
func NewGenEarkAipsEarkResultAccepted(body *GenEarkAipsResponseBody) *eark.EarkResult {
	v := &eark.EarkResult{
		WorkflowID: *body.WorkflowID,
		RunID:      *body.RunID,
	}

	return v
}

// NewGenEarkAipsNotAvailable builds a eark service gen_eark_aips endpoint
// not_available error.
func NewGenEarkAipsNotAvailable(body *GenEarkAipsNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGenEarkAipsNotValid builds a eark service gen_eark_aips endpoint
// not_valid error.
func NewGenEarkAipsNotValid(body *GenEarkAipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAipGenStatusEarkStatusResultOK builds a "eark" service "aip_gen_status"
// endpoint result from a HTTP "OK" response.
func NewAipGenStatusEarkStatusResultOK(body *AipGenStatusResponseBody) *eark.EarkStatusResult {
	v := &eark.EarkStatusResult{
		Running:    *body.Running,
		Status:     body.Status,
		WorkflowID: body.WorkflowID,
		RunID:      body.RunID,
	}

	return v
}

// NewGenEarkDipsEarkDIPResultAccepted builds a "eark" service "gen_eark_dips"
// endpoint result from a HTTP "Accepted" response.
func NewGenEarkDipsEarkDIPResultAccepted(body *GenEarkDipsResponseBody) *eark.EarkDIPResult {
	v := &eark.EarkDIPResult{
		Success: *body.Success,
		AipName: body.AipName,
		DipName: body.DipName,
	}

	return v
}

// NewGenEarkDipsNotAvailable builds a eark service gen_eark_dips endpoint
// not_available error.
func NewGenEarkDipsNotAvailable(body *GenEarkDipsNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGenEarkDipsNotValid builds a eark service gen_eark_dips endpoint
// not_valid error.
func NewGenEarkDipsNotValid(body *GenEarkDipsNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDipGenStatusEarkStatusResultOK builds a "eark" service "dip_gen_status"
// endpoint result from a HTTP "OK" response.
func NewDipGenStatusEarkStatusResultOK(body *DipGenStatusResponseBody) *eark.EarkStatusResult {
	v := &eark.EarkStatusResult{
		Running:    *body.Running,
		Status:     body.Status,
		WorkflowID: body.WorkflowID,
		RunID:      body.RunID,
	}

	return v
}

// ValidateGenEarkAipsResponseBody runs the validations defined on
// gen_eark_aips_response_body
func ValidateGenEarkAipsResponseBody(body *GenEarkAipsResponseBody) (err error) {
	if body.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "body"))
	}
	if body.RunID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("run_id", "body"))
	}
	return
}

// ValidateAipGenStatusResponseBody runs the validations defined on
// aip_gen_status_response_body
func ValidateAipGenStatusResponseBody(body *AipGenStatusResponseBody) (err error) {
	if body.Running == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("running", "body"))
	}
	return
}

// ValidateGenEarkDipsResponseBody runs the validations defined on
// gen_eark_dips_response_body
func ValidateGenEarkDipsResponseBody(body *GenEarkDipsResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateDipGenStatusResponseBody runs the validations defined on
// dip_gen_status_response_body
func ValidateDipGenStatusResponseBody(body *DipGenStatusResponseBody) (err error) {
	if body.Running == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("running", "body"))
	}
	return
}

// ValidateGenEarkAipsNotAvailableResponseBody runs the validations defined on
// gen_eark_aips_not_available_response_body
func ValidateGenEarkAipsNotAvailableResponseBody(body *GenEarkAipsNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenEarkAipsNotValidResponseBody runs the validations defined on
// gen_eark_aips_not_valid_response_body
func ValidateGenEarkAipsNotValidResponseBody(body *GenEarkAipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenEarkDipsNotAvailableResponseBody runs the validations defined on
// gen_eark_dips_not_available_response_body
func ValidateGenEarkDipsNotAvailableResponseBody(body *GenEarkDipsNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenEarkDipsNotValidResponseBody runs the validations defined on
// gen_eark_dips_not_valid_response_body
func ValidateGenEarkDipsNotValidResponseBody(body *GenEarkDipsNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
