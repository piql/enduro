// Code generated by goa v3.5.5, DO NOT EDIT.
//
// eark HTTP client types
//
// Command:
// $ goa gen github.com/penwern/enduro/internal/api/design -o internal/api

package client

import (
	eark "github.com/penwern/enduro/internal/api/gen/eark"
	goa "goa.design/goa/v3/pkg"
)

// SubmitResponseBody is the type of the "eark" service "submit" endpoint HTTP
// response body.
type SubmitResponseBody struct {
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	RunID      *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
}

// StatusResponseBody is the type of the "eark" service "status" endpoint HTTP
// response body.
type StatusResponseBody struct {
	Running    *bool   `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
	Status     *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	WorkflowID *string `form:"workflow_id,omitempty" json:"workflow_id,omitempty" xml:"workflow_id,omitempty"`
	RunID      *string `form:"run_id,omitempty" json:"run_id,omitempty" xml:"run_id,omitempty"`
}

// HintsResponseBody is the type of the "eark" service "hints" endpoint HTTP
// response body.
type HintsResponseBody struct {
	// A list of known values of completedDir used by existing watchers.
	CompletedDirs []string `form:"completed_dirs,omitempty" json:"completed_dirs,omitempty" xml:"completed_dirs,omitempty"`
}

// SubmitNotAvailableResponseBody is the type of the "eark" service "submit"
// endpoint HTTP response body for the "not_available" error.
type SubmitNotAvailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitNotValidResponseBody is the type of the "eark" service "submit"
// endpoint HTTP response body for the "not_valid" error.
type SubmitNotValidResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewSubmitEarkResultAccepted builds a "eark" service "submit" endpoint result
// from a HTTP "Accepted" response.
func NewSubmitEarkResultAccepted(body *SubmitResponseBody) *eark.EarkResult {
	v := &eark.EarkResult{
		WorkflowID: *body.WorkflowID,
		RunID:      *body.RunID,
	}

	return v
}

// NewSubmitNotAvailable builds a eark service submit endpoint not_available
// error.
func NewSubmitNotAvailable(body *SubmitNotAvailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitNotValid builds a eark service submit endpoint not_valid error.
func NewSubmitNotValid(body *SubmitNotValidResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewStatusEarkStatusResultOK builds a "eark" service "status" endpoint result
// from a HTTP "OK" response.
func NewStatusEarkStatusResultOK(body *StatusResponseBody) *eark.EarkStatusResult {
	v := &eark.EarkStatusResult{
		Running:    *body.Running,
		Status:     body.Status,
		WorkflowID: body.WorkflowID,
		RunID:      body.RunID,
	}

	return v
}

// NewHintsEarkHintsResultOK builds a "eark" service "hints" endpoint result
// from a HTTP "OK" response.
func NewHintsEarkHintsResultOK(body *HintsResponseBody) *eark.EarkHintsResult {
	v := &eark.EarkHintsResult{}
	if body.CompletedDirs != nil {
		v.CompletedDirs = make([]string, len(body.CompletedDirs))
		for i, val := range body.CompletedDirs {
			v.CompletedDirs[i] = val
		}
	}

	return v
}

// ValidateSubmitResponseBody runs the validations defined on SubmitResponseBody
func ValidateSubmitResponseBody(body *SubmitResponseBody) (err error) {
	if body.WorkflowID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workflow_id", "body"))
	}
	if body.RunID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("run_id", "body"))
	}
	return
}

// ValidateStatusResponseBody runs the validations defined on StatusResponseBody
func ValidateStatusResponseBody(body *StatusResponseBody) (err error) {
	if body.Running == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("running", "body"))
	}
	return
}

// ValidateSubmitNotAvailableResponseBody runs the validations defined on
// submit_not_available_response_body
func ValidateSubmitNotAvailableResponseBody(body *SubmitNotAvailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitNotValidResponseBody runs the validations defined on
// submit_not_valid_response_body
func ValidateSubmitNotValidResponseBody(body *SubmitNotValidResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
